#!/usr/bin/python
#coding: utf-8 -*-

# Copyright (c) 2014 John Dewey
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

import os
import hashlib


DOCUMENTATION = """
---
module: logrotate
version_added: 1.6
short_description: Manages logrotate configuration files.
description:
   - Installs the logrotate package.
   - Manages logrotate configuration files.
options:
   name:
     description:
        - Name of the logrotate config file.
     required: true
   path:
     description:
        - Path of the file to manage.
     required: true
   frequency:
     description:
        - Set the frequency of rotation.
     default: daily
     required: false
   rotate:
     description:
        - Number of logs to retain.
     default: 8
     required: false
   create:
     description:
        - Set log creation parameters (after rotation but before the postrotate).
     required: false
   postrotate:
     description:
        - Set postrotate command to run.
     required: false
   config_dir:
     description:
        - Directory containing config files.
     default: /etc/logrotate.d
     required: false
   state:
     description:
        - Indicate the desired state of the resource.
     choices: ['present', 'absent']
     default: present
requirements: ["logrotate"]
"""

EXAMPLES = """
# Add an Apache2 config file for rotation.
- logrotate: name=apache2 path=/var/log/apache2/*.log

# Add a config file with the create directive.
- logrotate: name=apache2 path=/var/log/apache2/*.log create="644 root adm"

# Add a config file with the postrotate directive.
- logrotate: name=apache2 path=/var/log/apache2/*.log postrotate="exec script"

# Remove the Apache2 config file
- logrotate: name=apache2 path=/var/log/apache2/*.log state=absent
"""

TEMPLATE = """
# Generated by Ansible.
# Local modifications will be overwritten.

{path}
{{
  {frequency}
  missingok
  rotate {rotate}
  compress
  delaycompress
  copytruncate
  notifempty
  {create}
  {postrotate}
}}
"""

POSTROTATE_STANZA = """
  postrotate
      {postrotate}
  endscript
"""

def _strip_empty_lines(conf):
    conf_list = [line for line in conf.split('\n') if line.strip()]

    return '\n'.join(conf_list)

def _compare_config(config, config_path):
    current_run_md5 = hashlib.md5(config).hexdigest()
    on_disk_md5 = None
    with open(config_path) as f:
        data = f.read()
        local_md5 = hashlib.md5(data).hexdigest()

    return on_disk_md5 == current_run_md5

def _write_config(config, config_path):
        with open(config_path, 'w') as f:
            f.write(config)

def _get_config_path(module):
    name = module.params.get('name')
    config_dir = module.params.get('config_dir')

    return os.path.join(config_dir, name)

def _get_config(module):
    path = module.params.get('path')
    frequency = module.params.get('frequency')
    rotate = module.params.get('rotate')
    create = module.params.get('create')
    postrotate = module.params.get('postrotate')

    if create is None:
        create = ''
    else:
        create = 'create {0}'.format(create)

    if postrotate is None:
        postrotate = ''
    else:
        postrotate = POSTROTATE_STANZA.format(postrotate=postrotate)

    t = TEMPLATE.format(path=path,
                        frequency=frequency,
                        rotate=rotate,
                        create=create,
                        postrotate=postrotate)

    return _strip_empty_lines(t)

def _add_config(module):
    config_path = _get_config_path(module)
    config = _get_config(module)
    if os.path.isfile(config_path):
        if _compare_config(config, config_path):
            _write_config(config, config_path)
            module.exit_json(changed=True, result="Enabled")
        module.exit_json(changed=False, result="Success")
    else:
        _write_config(config, config_path)
        module.exit_json(changed=True, result="Enabled")

def _remove_config(module):
    config_path = _get_config_path(module)
    if os.path.isfile(config_path):
        os.remove()
        module.exit_json(changed=True, result="Disabled")
    else:
        module.exit_json(changed=False, result="Success")

def main():
    module = AnsibleModule(
        argument_spec = dict(
            name       = dict(required=True),
            path       = dict(required=True),
            frequency  = dict(default='daily'),
            rotate     = dict(default='8'),
            create     = dict(),
            postrotate = dict(),
            config_dir = dict(default='/etc/logrotate.d'),
            state      = dict(default='present', choices=['absent', 'present']),
        ),
    )

    if module.params.get('state') == 'present':
        _add_config(module)

    if module.params.get('state') == 'absent':
        _remove_config(module)

# this is magic, see lib/ansible/module_common.py
from ansible.module_utils.basic import *
main()
